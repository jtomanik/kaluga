kotlin {
    android("androidLib") {
        publishAllLibraryVariants()
    }


    if (!gradle.ext.ios_one_sourceset) {
        targetFromPreset(presets.iosX64, 'iosX64')
        targetFromPreset(presets.iosArm32, 'iosArm32')
        targetFromPreset(presets.iosArm64, 'iosArm64')
    }
    else {
        // XCode / Appcode set this variable
        targetFromPreset(presets."$gradle.ext.ios_arch", 'ios')

    }

    jvm()
    js {
        browser()
        configure([compilations.main, compilations.test]) {
            tasks.getByName(compileKotlinTaskName).kotlinOptions {
                metaInfo = true
                sourceMap = true
                moduleKind = 'umd'
            }
        }
    }

    sourceSets {

        commonMain {
            dependencies {
                implementation kotlin("stdlib-common")
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$gradle.kotlinx_corountines_version"
            }
        }

        commonTest {
            dependencies {
                implementation kotlin("test-common")
                implementation kotlin("test-annotations-common")
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$gradle.kotlinx_corountines_version"
            }
        }

        jvmMain {
            dependencies {
                implementation kotlin("stdlib")
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-swing:$gradle.kotlinx_corountines_version"
            }
        }
        jvmTest {
            dependsOn commonTest
            dependencies {
                implementation kotlin("test")
                implementation kotlin("test-junit")
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$gradle.kotlinx_corountines_version"
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }

        if (!gradle.ext.ios_one_sourceset) {


            iosX64Main {
                kotlin.srcDirs("src/iosMain")
                dependencies {
                    implementation kotlin("stdlib-common")
                    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$gradle.kotlinx_corountines_version"
                }
                //dependsOn iosMain
            }

            iosX64Test {
                kotlin.srcDirs("src/iosTest")
                dependencies {
                    implementation kotlin('test')
                }
                //dependsOn iosTest
            }

            iosArm32Main {
                kotlin.srcDirs("src/iosMain")
                dependencies {
                    implementation kotlin("stdlib-common")
                    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$gradle.kotlinx_corountines_version"
                }
                //dependsOn iosMain
            }
            iosArm32Test {
                kotlin.srcDirs("src/iosTest")
                dependencies {
                    implementation kotlin('test')
                }
                //dependsOn iosTest
            }

            iosArm64Main {
                kotlin.srcDirs("src/iosMain")
                dependencies {
                    implementation kotlin("stdlib-common")
                    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$gradle.kotlinx_corountines_version"
                }
                //dependsOn iosMain
            }
            iosArm64Test {
                kotlin.srcDirs("src/iosTest")
                dependencies {
                    implementation kotlin('test')
                }
                //dependsOn iosTest
            }
        }
        else {
            iosMain {
                dependencies {
                    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$gradle.kotlinx_corountines_version"
                    implementation kotlin('stdlib')
                }
            }
            iosTest {
                dependsOn commonTest
                dependencies {
                    implementation kotlin('test')
                }
            }

        }

        sourceSets.all {
            languageSettings {
                useExperimentalAnnotation 'kotlinx.coroutines.ExperimentalCoroutinesApi'
                useExperimentalAnnotation 'kotlinx.coroutines.ObsoleteCoroutinesApi'
                useExperimentalAnnotation 'kotlinx.coroutines.FlowPreview'
                enableLanguageFeature("InlineClasses")

            }
        }

        // Android dependencies must be declared below

    }
}

android {

    defaultPublishConfig = "debug"

    compileSdkVersion gradle.android_target_version

    defaultConfig {
        minSdkVersion gradle.android_version
        targetSdkVersion gradle.android_target_version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'src/androidLibMain/AndroidManifest.xml'
        }
        androidTest {
            manifest.srcFile 'src/androidLibAndroidTest/AndroidManifest.xml'
        }
    }

    packagingOptions {
        exclude 'META-INF/kotlinx-coroutines-core.kotlin_module'
    }
}


configurations {
    // workaround for https://youtrack.jetbrains.com/issue/KT-27170
    compileClasspath

}


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$gradle.kotlinx_corountines_version"

    testImplementation 'junit:junit:4.12'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$gradle.kotlinx_corountines_version"
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    androidTestImplementation 'androidx.test:core:1.2.1-alpha02'
    androidTestImplementation 'androidx.test:core-ktx:1.2.1-alpha02'
    androidTestImplementation 'androidx.test:rules:1.3.0-alpha02'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2-alpha02'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.2-alpha02'
    androidTestImplementation 'androidx.test:runner:1.3.0-alpha02'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-alpha02'
    androidTestImplementation 'org.jetbrains.kotlin:kotlin-test'
    androidTestImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn 'linkDebugTestIos'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getTest('DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}

kotlin {
    targets {
        configure([]) {
            tasks.getByName(compilations.main.compileKotlinTaskName).kotlinOptions {
                jvmTarget = "1.8"
            }
        }
    }
}

task printConfigurations {
    doLast {
        configurations.each { println it }
    }
}

